---
interface Props {
  title: string;
  items: string[];
}

const { title, items } = Astro.props;
---

<div class="rounded-lg bg-white p-6 shadow-sm dark:bg-gray-800">
  <div class="flex items-start justify-between">
    <h3 class="mb-4 text-xl font-semibold text-gray-900 dark:text-gray-100">{title}</h3>
    <button
      class="expand-button text-sm text-blue-600 transition-colors hover:text-blue-700 dark:text-blue-400 dark:hover:text-blue-300"
      aria-expanded="false"
      aria-controls={`content-${title.toLowerCase().replace(/\s+/g, "-")}`}
    >
      Show More
    </button>
  </div>
  <ul
    id={`content-${title.toLowerCase().replace(/\s+/g, "-")}`}
    class="space-y-2 overflow-hidden transition-all duration-300"
    style="max-height: 80px;"
  >
    {
      items.map((item) => (
        <li class="flex items-start">
          <span class="text-gray-700 dark:text-gray-300">{item}</span>
        </li>
      ))
    }
  </ul>
</div>

<script>
  document.addEventListener("DOMContentLoaded", () => {
    const buttons = document.querySelectorAll(".expand-button");

    buttons.forEach((button) => {
      const content = document.getElementById(button.getAttribute("aria-controls")!);
      const contentHeight = content?.scrollHeight;

      button.addEventListener("click", () => {
        const isExpanded = button.getAttribute("aria-expanded") === "true";
        button.setAttribute("aria-expanded", (!isExpanded).toString());
        button.textContent = isExpanded ? "Show More" : "Show Less";

        if (content) {
          content.style.maxHeight = isExpanded ? "80px" : `${contentHeight}px`;
        }
      });
    });
  });
</script>

<style>
  .expand-button {
    font-size: 0.875rem;
    font-weight: 500;
    padding: 0.25rem 0.5rem;
    border-radius: 0.375rem;
  }
</style>
