<section class="relative py-32 flex flex-col items-center justify-center overflow-hidden">
  <div class="absolute inset-0 z-0 pointer-events-none">
    <div class="w-full h-full hero-grid-bg"></div>
  </div>
  <div class="relative z-10 flex flex-col items-center">
    <span
      class="mb-8 px-6 py-2 rounded-full bg-[#232b3a] text-white/90 text-base tracking-wide border border-white/10 shadow-lg flex items-center gap-2 font-medium"
    >
      Available for freelance work
      <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 ml-1" fill="none" viewBox="0 0 24 24" stroke="currentColor"
        ><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 8l4 4m0 0l-4 4m4-4H3"></path></svg
      >
    </span>
    <h1 class="text-white text-6xl md:text-8xl font-bold text-center mb-6">
      Hi, I'm <span id="typewriter" class="text-blue-400">Ben Limmer</span><span
        id="cursor"
        class="cursor text-blue-400">|</span
      >
    </h1>
    <p class="text-2xl md:text-3xl text-center max-w-3xl mb-12 text-white/60 font-medium">
      I'm a freelance software engineer and architect with a passion for developer experience.
    </p>
    <div class="flex gap-6">
      <a
        href="#contact"
        class="px-8 py-3 rounded bg-blue-500 hover:bg-blue-600 text-white font-semibold text-lg transition"
        >Get in touch</a
      >
      <a
        href="#portfolio"
        class="px-8 py-3 rounded bg-[#161c26] hover:bg-[#232b3a] text-white font-semibold text-lg border border-white/10 transition"
        >View my work</a
      >
    </div>
  </div>
  <script is:inline>
    const TYPING_SPEED = 120;
    const TYPING_PAUSE = 2000;
    const DELETING_SPEED = 120;
    const SWITCH_PAUSE = 800;

    const names = ["Ben Limmer", "blimmer"];
    let current = 0;
    let el = null;
    let typing = true;
    let charIndex = 0;
    let loopTimeout;

    function typeLoop() {
      const name = names[current];
      if (typing) {
        if (charIndex < name.length) {
          el.textContent = name.slice(0, charIndex + 1);
          charIndex++;
          loopTimeout = setTimeout(typeLoop, TYPING_SPEED);
        } else {
          typing = false;
          loopTimeout = setTimeout(typeLoop, TYPING_PAUSE);
        }
      } else {
        if (charIndex > 0) {
          el.textContent = name.slice(0, charIndex - 1);
          charIndex--;
          loopTimeout = setTimeout(typeLoop, DELETING_SPEED);
        } else {
          typing = true;
          current = (current + 1) % names.length;
          loopTimeout = setTimeout(typeLoop, SWITCH_PAUSE);
        }
      }
    }

    if (typeof window !== "undefined") {
      window.addEventListener("DOMContentLoaded", () => {
        el = document.getElementById("typewriter");
        typeLoop();
      });
    }
  </script>
  <style>
    .hero-grid-bg {
      background-color: #101623;
      background-image:
        linear-gradient(to right, rgba(255, 255, 255, 0.08) 1px, transparent 1px),
        linear-gradient(to bottom, rgba(255, 255, 255, 0.08) 1px, transparent 1px);
      background-size: 40px 40px;
    }
    .cursor {
      display: inline-block;
      font-weight: bold;
      margin-left: 2px;
      animation: blink 1.5s step-end infinite;
      position: relative;
      top: -0.15em;
    }
    @keyframes blink {
      0%,
      50% {
        opacity: 1;
      }
      50.1%,
      100% {
        opacity: 0;
      }
    }
  </style>
</section>
